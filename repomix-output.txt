This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/api/images/create/route.ts
src/app/api/images/delete/route.ts
src/app/api/uploadthing/core.ts
src/app/api/uploadthing/route.ts
src/app/gallery/page.tsx
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/DateRangePicker.tsx
src/components/ImageCard.tsx
src/components/ImageUploader.tsx
src/components/Navigation.tsx
src/lib/mongodb.ts
src/lib/uploadthing.ts
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from 'next';

const config: NextConfig = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'uploadthing.com',
      },
      {
        protocol: 'https',
        hostname: 'utfs.io',
      },
    ],
  },
};

export default config;

================
File: package.json
================
{
  "name": "bru",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@heroicons/react": "^2.2.0",
    "@radix-ui/react-aspect-ratio": "^1.1.2",
    "@radix-ui/themes": "^3.2.0",
    "@uploadthing/react": "^7.3.0",
    "date-fns": "^4.1.0",
    "date-fns-tz": "^3.2.0",
    "mongodb": "^6.13.1",
    "next": "15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "uploadthing": "^7.5.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/api/images/create/route.ts
================
import { NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { parseISO, startOfDay } from "date-fns";
import { toDate } from "date-fns-tz";

export async function POST(request: Request) {
  try {
    const { imageUrl, tradingDate } = await request.json();

    if (!imageUrl || !tradingDate) {
      return NextResponse.json(
        { error: "Image URL and trading date are required" },
        { status: 400 }
      );
    }

    // Store trading date as ISO string with consistent timezone and start of day
    const tradingDateISO = startOfDay(
      toDate(parseISO(tradingDate), { timeZone: 'Asia/Kolkata' })
    ).toISOString();

    // Log for debugging
    console.log('Saving image with date:', {
      originalDate: tradingDate,
      storedDate: tradingDateISO
    });

    const client = await clientPromise;
    const db = client.db("trading-journal");
    
    const result = await db.collection("images").insertOne({
      imageUrl,
      tradingDate: tradingDateISO,
      uploadedAt: new Date().toISOString(),
      createdAt: new Date()
    });

    return NextResponse.json({ 
      success: true, 
      id: result.insertedId,
      tradingDate: tradingDateISO // Return for verification
    });
  } catch (error) {
    console.error("Error saving image metadata:", error);
    return NextResponse.json(
      { error: "Failed to save image metadata" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/images/delete/route.ts
================
import { NextResponse } from "next/server";
import clientPromise from "@/lib/mongodb";
import { ObjectId } from "mongodb";
import { UTApi } from "uploadthing/server";

// Initialize uploadthing with your API key
const utapi = new UTApi();

export async function DELETE(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const imageId = searchParams.get("id");
    const imageUrl = searchParams.get("url");

    if (!imageId || !imageUrl) {
      return NextResponse.json(
        { error: "Image ID and URL are required" },
        { status: 400 }
      );
    }

    const client = await clientPromise;
    const db = client.db("trading-journal");

    // Delete from MongoDB
    const result = await db
      .collection("images")
      .deleteOne({ _id: new ObjectId(imageId) });

    if (result.deletedCount === 0) {
      return NextResponse.json(
        { error: "Image not found" },
        { status: 404 }
      );
    }

    // Delete from Uploadthing
    // Extract the file key from the URL
    const fileKey = imageUrl.split("/").pop();
    if (fileKey) {
      await utapi.deleteFiles(fileKey);
    }

    return NextResponse.json({ message: "Image deleted successfully" });
  } catch (error) {
    console.error("Error deleting image:", error);
    return NextResponse.json(
      { error: "Failed to delete image" },
      { status: 500 }
    );
  }
}

================
File: src/app/api/uploadthing/core.ts
================
import { createUploadthing, type FileRouter } from "uploadthing/next";
import clientPromise from "@/lib/mongodb";
import { MongoClient } from "mongodb";

const f = createUploadthing();

export const ourFileRouter = {
  imageUploader: f({
    image: {
      maxFileSize: "4MB",
      maxFileCount: 1,
    },
  })
    .middleware(async () => {
      return { timestamp: new Date().toISOString() };
    })
    .onUploadComplete(async ({ file }) => {
      return { url: file.url };
    }),
} satisfies FileRouter;

export type OurFileRouter = typeof ourFileRouter;

================
File: src/app/api/uploadthing/route.ts
================
import { createRouteHandler } from "uploadthing/next";
import { ourFileRouter } from "./core";

export const { GET, POST } = createRouteHandler({
  router: ourFileRouter,
});

================
File: src/app/gallery/page.tsx
================
import { Document, ObjectId, WithId } from "mongodb";
import { parseISO, startOfDay, endOfDay } from 'date-fns';
import { toDate } from 'date-fns-tz';

interface ImageDocument extends Document {
  _id: ObjectId;
  imageUrl: string;
  uploadedAt: string;
  tradingDate: string;
  createdAt: Date;
}

interface PageProps {
  searchParams?: {
    startDate?: string;
    endDate?: string;
  };
}

import Navigation from "@/components/Navigation";
import ImageCard from "@/components/ImageCard";
import DateRangePicker from "@/components/DateRangePicker";
import clientPromise from "@/lib/mongodb";

export const dynamic = "force-dynamic";

async function getImages(startDate?: string, endDate?: string) {
  try {
    const client = await clientPromise;
    const db = client.db("trading-journal");

    let query = {};
    if (startDate || endDate) {
      // Parse dates and set proper day boundaries using date-fns with timezone
      const start = startDate ? 
        startOfDay(toDate(parseISO(startDate), { timeZone: 'Asia/Kolkata' })) : 
        null;
      const end = endDate ? 
        endOfDay(toDate(parseISO(endDate), { timeZone: 'Asia/Kolkata' })) : 
        null;

      query = {
        tradingDate: {
          ...(start && { $gte: start.toISOString() }),
          ...(end && { $lte: end.toISOString() })
        }
      };
      
      // Enhanced debugging
      console.log('Date Range Query:', {
        original: { startDate, endDate },
        parsed: {
          start: start?.toISOString(),
          end: end?.toISOString()
        },
        query
      });
    }

    const images = await db.collection<ImageDocument>("images")
      .find(query)
      .sort({ tradingDate: -1 })
      .toArray();

    // Log results for debugging
    console.log('Found images:', images.length, {
      dates: images.map(img => img.tradingDate)
    });

    return images;
  } catch (error) {
    console.error("Failed to fetch images:", error);
    return [];
  }
}

export default async function Gallery({
  searchParams = {}
}: PageProps) {
  // Convert searchParams to a regular object to avoid the async issue
  const params = {
    startDate: String(searchParams.startDate || ''),
    endDate: String(searchParams.endDate || '')
  };

  const images = await getImages(
    params.startDate || undefined,
    params.endDate || undefined
  );
  
  const hasDateFilter = params.startDate || params.endDate;

  return (
    <>
      <Navigation />
      <main className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center mb-8">
          Trading Charts Gallery
        </h1>
        
        <div className="flex justify-center mb-8">
          <DateRangePicker />
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {images.map((image: WithId<ImageDocument>) => (
            <ImageCard
              key={image._id.toString()}
              id={image._id.toString()}
              imageUrl={image.imageUrl}
              uploadedAt={image.uploadedAt}
              tradingDate={image.tradingDate}
            />
          ))}
        </div>
        
        {images.length === 0 && (
          <p className="text-center text-gray-500 mt-8">
            {hasDateFilter
              ? 'No images found for the selected date range.'
              : 'No images uploaded yet. Start by uploading some trading charts!'}
          </p>
        )}
      </main>
    </>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import { Theme } from "@radix-ui/themes";
import "@radix-ui/themes/styles.css";
import "./globals.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Theme appearance="dark" accentColor="blue" grayColor="sand">
          <main className="min-h-screen">
            {children}
          </main>
        </Theme>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import ImageUploader from "@/components/ImageUploader";
import Navigation from "@/components/Navigation";
import { Container, Heading } from "@radix-ui/themes";

export default function Home() {
  return (
    <>
      <Navigation />
      <Container>
        <Heading size="8" align="center" mb="6">
          Trading Journal
        </Heading>
        <ImageUploader />
      </Container>
    </>
  );
}

================
File: src/components/DateRangePicker.tsx
================
'use client';

import { useRouter, useSearchParams } from 'next/navigation';
import { useCallback, useEffect, useState, useRef } from 'react';

interface DateRange {
  startDate: string;
  endDate: string;
}

const DATE_FORMAT_OPTIONS = {
  month: 'short' as const,
  day: 'numeric' as const,
  year: 'numeric' as const
};

export default function DateRangePicker() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const [selectedRange, setSelectedRange] = useState<DateRange>({
    startDate: searchParams.get('startDate') || '',
    endDate: searchParams.get('endDate') || ''
  });
  const [currentMonth, setCurrentMonth] = useState(() => {
    const today = new Date();
    return {
      month: today.getMonth(),
      year: today.getFullYear()
    };
  });

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const updateUrl = useCallback((range: DateRange) => {
    const params = new URLSearchParams();
    if (range.startDate) params.set('startDate', range.startDate);
    if (range.endDate) params.set('endDate', range.endDate);
    router.push(`/gallery${params.toString() ? `?${params.toString()}` : ''}`);
  }, [router]);

  const clearSelection = () => {
    setSelectedRange({ startDate: '', endDate: '' });
    router.push('/gallery');
    setIsOpen(false);
  };

  const getDaysInMonth = (year: number, month: number) => {
    return new Date(year, month + 1, 0).getDate();
  };

  const getFirstDayOfMonth = (year: number, month: number) => {
    return new Date(year, month, 1).getDay();
  };

  const formatDate = (year: number, month: number, day: number) => {
    return `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
  };

  const handleDateClick = (dateString: string) => {
    if (!selectedRange.startDate || (selectedRange.startDate && selectedRange.endDate)) {
      setSelectedRange({
        startDate: dateString,
        endDate: ''
      });
    } else {
      const start = new Date(selectedRange.startDate);
      const end = new Date(dateString);
      
      setSelectedRange({
        startDate: start <= end ? selectedRange.startDate : dateString,
        endDate: start <= end ? dateString : selectedRange.startDate
      });
    }
  };

  useEffect(() => {
    if (selectedRange.startDate && selectedRange.endDate) {
      updateUrl(selectedRange);
    }
  }, [selectedRange, updateUrl]);

  const renderCalendar = () => {
    const daysInMonth = getDaysInMonth(currentMonth.year, currentMonth.month);
    const firstDay = getFirstDayOfMonth(currentMonth.year, currentMonth.month);
    const days = [];
    
    for (let i = 0; i < firstDay; i++) {
      days.push(<div key={`empty-${i}`} />);
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const dateString = formatDate(currentMonth.year, currentMonth.month, day);
      const isSelected = (selectedRange.startDate && dateString === selectedRange.startDate) ||
                        (selectedRange.endDate && dateString === selectedRange.endDate);
      const isInRange = selectedRange.startDate && selectedRange.endDate &&
                       dateString > selectedRange.startDate && dateString < selectedRange.endDate;
      const isToday = dateString === new Date().toISOString().split('T')[0];

      days.push(
        <button
          key={dateString}
          onClick={() => handleDateClick(dateString)}
          className={`
            h-9 w-9 rounded-full text-sm relative flex items-center justify-center
            transition-all duration-200
            ${isSelected 
              ? 'bg-blue-500 text-white dark:bg-blue-500 hover:bg-blue-600 dark:hover:bg-blue-600' 
              : 'hover:bg-blue-50 dark:hover:bg-blue-900/20'}
            ${isInRange 
              ? 'bg-blue-50 dark:bg-blue-900/20' 
              : ''}
            ${isToday && !isSelected 
              ? 'border border-blue-500' 
              : ''}
            dark:text-gray-200
            disabled:opacity-50 disabled:cursor-not-allowed
          `}
        >
          {day}
        </button>
      );
    }

    return days;
  };

  const navigateMonth = (delta: number) => {
    setCurrentMonth(prev => {
      const nextMonth = prev.month + delta;
      return {
        year: prev.year + Math.floor(nextMonth / 12),
        month: ((nextMonth % 12) + 12) % 12
      };
    });
  };

  const formatDisplayDate = (dateString: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', DATE_FORMAT_OPTIONS);
  };

  return (
    <div className="relative inline-block" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={`
          px-4 py-2.5 rounded-lg text-sm font-medium transition-all duration-200
          ${selectedRange.startDate || selectedRange.endDate
            ? 'bg-blue-500 text-white hover:bg-blue-600'
            : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 hover:border-blue-500 dark:hover:border-blue-500'}
          focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500
          dark:text-gray-200
        `}
      >
        {selectedRange.startDate || selectedRange.endDate ? (
          <>
            {selectedRange.startDate ? formatDisplayDate(selectedRange.startDate) : ''}
            {selectedRange.endDate ? ` - ${formatDisplayDate(selectedRange.endDate)}` : ' (Selecting end date)'}
          </>
        ) : (
          'Select Dates'
        )}
      </button>

      {isOpen && (
        <div className="absolute mt-2 p-4 bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 z-50 min-w-[320px]">
          <div className="flex justify-between items-center mb-4">
            <button 
              onClick={() => navigateMonth(-1)}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors"
            >
              ‹
            </button>
            <span className="font-medium dark:text-gray-200">
              {new Date(currentMonth.year, currentMonth.month).toLocaleDateString('en-US', { 
                month: 'long', 
                year: 'numeric' 
              })}
            </span>
            <button 
              onClick={() => navigateMonth(1)}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors"
            >
              ›
            </button>
          </div>

          <div className="grid grid-cols-7 gap-1 mb-2">
            {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (
              <div key={day} className="h-9 flex items-center justify-center text-xs font-medium text-gray-500 dark:text-gray-400">
                {day}
              </div>
            ))}
          </div>

          <div className="grid grid-cols-7 gap-1">
            {renderCalendar()}
          </div>

          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex justify-between items-center">
            <button
              onClick={clearSelection}
              className={`text-sm font-medium px-3 py-1.5 rounded transition-colors
                ${selectedRange.startDate || selectedRange.endDate
                  ? 'text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20'
                  : 'text-gray-400 dark:text-gray-600 cursor-not-allowed'}`}
              disabled={!selectedRange.startDate && !selectedRange.endDate}
            >
              Clear
            </button>
            <button
              onClick={() => setIsOpen(false)}
              className="text-sm font-medium text-blue-500 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 px-3 py-1.5 rounded transition-colors"
            >
              Done
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: src/components/ImageCard.tsx
================
'use client';

import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { useState } from 'react';

interface ImageCardProps {
  id: string;
  imageUrl: string;
  uploadedAt: string;
  tradingDate: string;
}

const DATE_FORMAT_OPTIONS = {
  month: 'numeric' as const,
  day: 'numeric' as const,
  year: 'numeric' as const
};

export default function ImageCard({ id, imageUrl, uploadedAt, tradingDate }: ImageCardProps) {
  const router = useRouter();
  const [isDeleting, setIsDeleting] = useState(false);

  const handleDelete = async () => {
    if (window.confirm('Are you sure you want to delete this image?')) {
      try {
        setIsDeleting(true);
        const response = await fetch(
          `/api/images/delete?id=${id}&url=${encodeURIComponent(imageUrl)}`,
          {
            method: 'DELETE',
          }
        );

        if (!response.ok) {
          throw new Error('Failed to delete image');
        }

        router.refresh();
      } catch (error) {
        console.error('Error deleting image:', error);
        alert('Failed to delete image. Please try again.');
      } finally {
        setIsDeleting(false);
      }
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', DATE_FORMAT_OPTIONS);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div className="relative aspect-[16/9]">
        <Image
          src={imageUrl}
          alt="Trading Chart"
          fill
          className="object-cover"
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
        />
      </div>
      <div className="p-4">
        <div className="space-y-2">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Trading Date: {formatDate(tradingDate)}
          </p>
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Uploaded on: {formatDate(uploadedAt)}
          </p>
          <div className="flex justify-end">
            <button
              className={`px-4 py-2 text-sm font-medium text-white rounded-md 
                ${isDeleting 
                  ? 'bg-red-400 cursor-not-allowed' 
                  : 'bg-red-500 hover:bg-red-600'}`}
              disabled={isDeleting}
              onClick={handleDelete}
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/ImageUploader.tsx
================
"use client";

import { UploadDropzone } from "@/lib/uploadthing";
import { useRouter } from "next/navigation";
import { useState } from "react";

export default function ImageUploader() {
  const router = useRouter();
  const [isHovered, setIsHovered] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);

  const saveImageMetadata = async (imageUrl: string) => {
    try {
      const response = await fetch('/api/images/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imageUrl,
          tradingDate: selectedDate,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to save image metadata');
      }

      return true;
    } catch (error) {
      console.error('Error saving image metadata:', error);
      return false;
    }
  };

  return (
    <div className="w-full max-w-xl mx-auto p-4">
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold text-center mb-4">Upload Trading Chart</h2>
        
        <div className="mb-4">
          <label 
            htmlFor="tradingDate" 
            className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2"
          >
            Trading Date
          </label>
          <input
            type="date"
            id="tradingDate"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <div
          className={`transition-all duration-300 ease-in-out 
            ${isHovered ? 'transform scale-105' : ''}`}
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
        >
          <UploadDropzone
            endpoint="imageUploader"
            onClientUploadComplete={async (res) => {
              if (res?.[0]) {
                const success = await saveImageMetadata(res[0].url);
                if (success) {
                  setIsUploading(false);
                  router.refresh();
                  alert("Upload completed successfully!");
                } else {
                  alert("Image uploaded but failed to save metadata. Please try again.");
                }
              }
            }}
            onUploadBegin={() => {
              setIsUploading(true);
            }}
            onUploadError={(error: Error) => {
              setIsUploading(false);
              alert(`ERROR! ${error.message}`);
            }}
            className={`ut-button:bg-blue-500 ut-button:hover:bg-blue-600 
              ut-upload-icon:transition-transform ut-upload-icon:duration-300
              ${isUploading ? 'ut-upload-icon:animate-bounce' : ''}
              ${isHovered ? 'ut-upload-icon:scale-125 border-blue-500' : 'border-gray-300'}
              min-h-[200px] border-2 border-dashed
              transition-all duration-300 ease-in-out`}
          />
        </div>
      </div>
    </div>
  );
}

================
File: src/components/Navigation.tsx
================
"use client";

import { Button, Flex } from "@radix-ui/themes";
import Link from "next/link";
import { usePathname } from "next/navigation";

export default function Navigation() {
  const pathname = usePathname();
  
  return (
    <nav className="w-full border-b mb-6">
      <Flex gap="4" p="4" justify="center">
        <Button 
          variant={pathname === "/" ? "solid" : "ghost"}
          asChild
        >
          <Link href="/">Upload</Link>
        </Button>
        <Button 
          variant={pathname === "/gallery" ? "solid" : "ghost"}
          asChild
        >
          <Link href="/gallery">Gallery</Link>
        </Button>
      </Flex>
    </nav>
  );
}

================
File: src/lib/mongodb.ts
================
import { MongoClient } from 'mongodb';

if (!process.env.MONGODB_URI) {
  throw new Error('Please add your MongoDB URI to .env.local');
}

const uri = process.env.MONGODB_URI;
let client: MongoClient;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === 'development') {
  // In development mode, use a global variable so that the value
  // is preserved across module reloads caused by HMR (Hot Module Replacement).
  const globalWithMongo = global as typeof globalThis & {
    _mongoClientPromise?: Promise<MongoClient>;
  };

  if (!globalWithMongo._mongoClientPromise) {
    client = new MongoClient(uri);
    globalWithMongo._mongoClientPromise = client.connect();
  }
  clientPromise = globalWithMongo._mongoClientPromise;
} else {
  // In production mode, it's best to not use a global variable.
  client = new MongoClient(uri);
  clientPromise = client.connect();
}

export default clientPromise;

================
File: src/lib/uploadthing.ts
================
import { generateUploadButton, generateUploadDropzone } from "@uploadthing/react";
import type { OurFileRouter } from "@/app/api/uploadthing/core";

export const UploadButton = generateUploadButton<OurFileRouter>();
export const UploadDropzone = generateUploadDropzone<OurFileRouter>();

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================================
End of Codebase
================================================================
